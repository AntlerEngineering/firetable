rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
    //gives full rights to users with verified antler emails
        allow read, update,create: if userHasAntlerEmail()
    }
    match /hubResources/{docId}{
    	allow read,write:if userHasAntlerEmail();
     allow read: if founderData(database,request).cohort == resource.data.cohort
    }
    match /partnerships/{docId}{
    	allow read,write:if userHasAntlerEmail()
      allow read : if request.auth.uid != null;
    }
    match /advisors/{docId} {
      allow read: if request.auth.uid != null;
    }
    match /portfolio/{docId}{
    	allow read,write:if userHasAntlerEmail()
    }
    match /portfolio/{docId} {
        allow read,update: if docId in request.auth.token.portfolio
    }
    match /users/{userId} {
        allow create,get,update: if request.auth.uid == userId
    }
     match /users/{userId}/founders/{founderId} {
        allow create,read,update: if request.auth.uid == userId
    }
     match /profiles/{userId} {
       allow get,create,update: if request.auth.uid == userId
       //allow read,update,create:if true
    }
      match /founders/{userId} {
       allow get: if request.auth.uid !=null
       allow list:if founderData(database,request).cohort == resource.data.cohort   
    }
      match /cohorts/{id} {
        allow read: if profileData(database,request).cohort == resource.data.cohort 
    }
    match /portfolioEnquiries/{docId}{
        allow create: if true
    }
    match /founderPortal/{docId}{
        allow read: if request.auth.uid !=null
    }
    match /partnerships/{id} {
        allow read: if request.auth.uid !=null
    }
    match /sprintSubmissions/{id} {
        allow create: if validateCreatedBy(request)
       allow list:  if request.auth.uid in resource.data.editors
      allow list:if founderData(database,request).cohort == resource.data.cohort   
        allow update: if  request.auth.uid in resource.data.editors && request.auth.uid == request.resource.data.updatedBy
    }
    
      match /teams/{id} {
        allow create: if validateCreatedBy(request)
       	allow read:  if request.auth.uid in resource.data.editors
      	allow list:if founderData(database,request.auth.uid).cohort == resource.data.cohort   
        allow update: if  request.auth.uid in resource.data.editors && validateUpdatedBy(request)
    }
    match /trackoutApplications/{id} {
        allow create: if request.auth.uid == request.resource.data.createdBy
        allow list:  if request.auth.uid in resource.data.editors
       	allow update: if  request.auth.uid in resource.data.editors && validateUpdatedBy(request)
    }
    
    
  }
}

function userHasAntlerEmail(){
		return request.auth.token.email.matches(".*@antler[.]co") && request.auth.token.email_verified;
}


function validateCreatedBy(request){
	return request.auth.uid == request.resource.data.createdBy
}

function validateUpdatedBy(request){
	return request.auth.uid == request.resource.data.updatedBy
}

function founderData(database,request){
 return get(/databases/$(database)/documents/founders/$(request.auth.uid)).data 
}
function profileData(database,uid){
 return get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data 
}

